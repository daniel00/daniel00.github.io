{"/csharp/2024-04-08-csharp_old_style.html": {
    "title": "c# Main함수 보이게 코딩하는법",
    "keywords": "csharp",
    "url": "/csharp/2024-04-08-csharp_old_style.html",
    "body": "created : 2024-04-08 10:05 updated : 2024-04-08 11:40 .NET 6 에서 Old Style로 코드 작성하는 방법 .NET 6부터 Top Level Statement라는 방식으로 코드 스타일이 바뀌어서, 엔트리 포인트를 감춰놓고 바로 Console.WriteLine(“hello world”) 를 표시하고 있어서 당황스러웠다. 예전 방식으로 코딩하고 싶으면 다음의 방식으로 설정하면 된다. 콘솔에서 프로젝트 생성할때는 다음처럼 옵션처리 하여 생성 dotnet new console –use-program-main 비주얼 스튜디오에서는 프로젝트 생성시 Do not use top level statement 체크"
  },"/2024-04-08-unity.html": {
    "title": "Unity",
    "keywords": "",
    "url": "/2024-04-08-unity.html",
    "body": ""
  },"/categories/politics": {
    "title": "정치 경제",
    "keywords": "",
    "url": "/categories/politics",
    "body": "2024-04-08 12:02 &nbsp;&nbsp; 병립형-연동형"
  },"/2024-04-08-cpp-index.html": {
    "title": "Cpp Index",
    "keywords": "",
    "url": "/2024-04-08-cpp-index.html",
    "body": ""
  },"/2024-04-08-constructor.html": {
    "title": "Constructor",
    "keywords": "",
    "url": "/2024-04-08-constructor.html",
    "body": ""
  },"/2024-04-08-Animation.html": {
    "title": "Animation",
    "keywords": "",
    "url": "/2024-04-08-Animation.html",
    "body": ""
  },"/csharp/2024-04-07-srt_reserve_app.html": {
    "title": "SRT 예약 어플 만들기",
    "keywords": "csharp",
    "url": "/csharp/2024-04-07-srt_reserve_app.html",
    "body": "created : 2024-04-07 10:12 updated : 2024-04-08 15:14 SRT 예약 앱을 만드는 과정에 대해서 정리합니다. 크로스플랫폼 제작이 쉽도록 자마린으로 제작예정 C#으로 문법등을 테스트해 보자 로그인은 HttpClient 클래스를 이용한다 파이썬으로 작성된 코드를 참조한다. 동작을 요약하면, HttpClient를 사용해서 srt페이지에 로그인하는데, 이때 client.post(로그인아이디, 비밀번호) 의 형태로 메시지를 송신하면 되는것 같다. 메시지 형식은 JSON형식인 듯 하므로, Dictionary dict = “메시지아이디”:값 위 같은 딕셔너리 형태로 만들어서 client.post(dict) 하면 될 것 같다. 로그인만 되면, 필요한 내용으로 쿼리 내용을 post하면 되는 구조이므로 천천히 개발해 보자."
  },"/csharp/2024-04-07-csharp_on_mac.html": {
    "title": "맥에서 c# 컴파일 하는 방법",
    "keywords": "csharp",
    "url": "/csharp/2024-04-07-csharp_on_mac.html",
    "body": "created : 2024-04-07 09:24 updated : 2024-04-08 15:20 맥북에서 C# 을 컴파일하고 실행하는 방법 컴파일 방법 csc test.cs 이렇게 하면 test.exe 만들어지고 mono test.exe 로 실행할 수 있다."
  },"/cpp/2024-03-26-set_macbook_aac_aptx.html": {
    "title": "맥북에서 AAC, aptX 설정하는 법",
    "keywords": "cpp",
    "url": "/cpp/2024-03-26-set_macbook_aac_aptx.html",
    "body": "created : 2024-03-26 06:55 updated : 2024-04-08 15:33 QCY 이어폰을 맥북에 연결 할 때 끊김이 발생 할 경우 다음과 같이 점검해보세요 해결방법 : 아래처럼 AAC, aptX를 활성화 시킨뒤 다시 페어링 했더니 끊김이 발생하지 않는다. 터미널 열고, AptX 코덱 활성화 sudo defaults write bluetoothaudiod \"Enable AptX codec\" -bool true ACC 코덱 활성화 sudo defaults write bluetoothaudiod \"Enable AAC codec\" -bool true AptX, ACC 설정 확인 sudo defaults read bluetoothaudiod 기존 연결 삭제 후 다시 페어링!!!!!"
  },"/cpp/2024-02-29-eee.html": {
    "title": "eee",
    "keywords": "cpp",
    "url": "/cpp/2024-02-29-eee.html",
    "body": "created : 2024-02-29 00:07 updated : 2024-02-29 00:09 여기서 부터 글을 작성하세요"
  },"/cpp/2024-02-29-ddd.html": {
    "title": "포스트 제목을 입력하세요",
    "keywords": "cpp",
    "url": "/cpp/2024-02-29-ddd.html",
    "body": "created : 2024-02-29 00:05 updated : 2024-02-29 00:06 여기서 부터 글을 작성하세요"
  },"/2024-02-26-ccc.html": {
    "title": "ccc",
    "keywords": "",
    "url": "/2024-02-26-ccc.html",
    "body": ""
  },"/cpp/2024-02-26-ddd.html": {
    "title": "ddd",
    "keywords": "cpp",
    "url": "/cpp/2024-02-26-ddd.html",
    "body": "created : 2024-02-26 00:51 updated : 2024-03-23 19:46 여기서 부터 글을 작성하세요"
  },"/cpp/2024-02-26-bbb.html": {
    "title": "bbb",
    "keywords": "cpp",
    "url": "/cpp/2024-02-26-bbb.html",
    "body": "created : 2024-02-26 00:40 updated : 2024-02-29 00:20 여기서 부터 글을 작성하세요"
  },"/all/2024-02-26-AddImage.html": {
    "title": "이미지 넣는 방법2",
    "keywords": "all",
    "url": "/all/2024-02-26-AddImage.html",
    "body": "마크다운 파일에 이미지 넣는법에 대해 설명합니다. johngrib 님은 Github Repository에 Issue를 생성해서 이미지를 넣는 방법을 사용한다고 한다. 나는 img-paste.vim 플러그인을 활용하는 방법을 택했다. 이유는, 이미지를 클립보드에 캡처한 후 붙여넣으면 되므로 이미지 붙여넣기가 좀더 수훨 한 듯 하고, 깃헙에 접속하지 않아도 되기 때문이다. 다음의 순서로 이미지를 넣을 수 있다. img-paste.vim 을 설치하고 .vimrc에 다음과 같이 설정한다. \" for img-paste.vim autocmd FileType markdown nmap &lt;buffer&gt;&lt;silent&gt; &lt;leader&gt;p :call mdip#MarkdownClipboardImage()&lt;CR&gt; autocmd FileType markdown let g:PasteImageFunction = 'g:MarkdownPasteImage' let g:mdip_imgdir = \"/assets/img\" let g:mdip_imgname = 'image' 나는 이미지를 .md 파일이 위치하고 있는 디렉토리에 assets/img 디렉토리를 만든다음 저장하도록 설정했다. 이미지를 클립보드에 캡처하고 vim 명령모드에서 :MarkdownPasteImage를 누르면, 저장할 이름을 물어본다. 적당한 이름을 입력하고 엔터를 치면 이미지가 저장되고, 다음처럼 경로가 자동 입력된다. 그러면 이미지가 설정된 경로에 저장된다. 근데, img-paste.vim 에 설정한 경로 /assets/img 를 jekyll에서 찾을 수 있도록 경로 앞에 점을 두개 찍어주어야 한다. ../assets/img 실제 적용된 이미지 삽입 코드는 다음과 같다. ![imagepath](../assets/imagepath.png) 깃헙에 푸쉬해서 온라인에서도 이미지가 정상적으로 표시되는걸 확인했다. 이미지는 파일로 추가되므로, 항상 git add, git commit를 수행해 주어야 한다."
  },"/all/jekyll/2024-02-26-paste-image.html": {
    "title": "jekyll post 에 이미지 넣는 방법",
    "keywords": "all jekyll",
    "url": "/all/jekyll/2024-02-26-paste-image.html",
    "body": "created : 2024-02-26 00:35 updated : 2024-04-14 16:43 jekyll post에 이미지 넣는 방법에 대해 설명합니다. 이미지가 저장되는 경로는 , 현재 프로젝트 디렉토리의 assets 디렉토리에 넣으면 됩니다. jekyll은 이 경로의 이미지가 있는지 확인해서 포스트에 표시해 줍니다. vscode extention중 paste-image 를 이용하여 이미지를 붙여 넣습니다. paste-image 설정중 다음의 두가지를 설정해 주어야 합니다. 이미지가 저장되는 경로 ${projectRoot}/assets 저장된 이미지를 마크다운에 링크하는 Insert Pattern ${imageSyntaxPrefix}/assets/${imageFileName}${imageSyntaxSuffix} 이제 다음의 순서로 마크다운 문서에 이미지를 넣으면 됩니다. 이미지를 캡처합니다. 맥북 : 저는 cmd shift s 를 단축키로 지정하여 놓았습니다. 윈도우 : win shift s image-paste 단축키를 눌러 이미지를 붙여 넣습니다. 맥북: option cmd v 윈도우 : alt ctrl v 그러면 이미지가 저장되고, 저장된 경로를 링크하는 신텍스를 자동으로 넣어줍니다."
  },"/all/csharp/maui/2024-02-26-maui-xaml-cs-%EA%B5%AC%EC%A1%B0.html": {
    "title": "MAUI의 XAML과 CS 파일 구조",
    "keywords": "all csharp maui",
    "url": "/all/csharp/maui/2024-02-26-maui-xaml-cs-%EA%B5%AC%EC%A1%B0.html",
    "body": "created : 2024-02-26 00:35 updated : 2024-04-13 20:39 XAML과 CS는 한쌍으로 동작한다 xaml 파일은 페이지의 모양을 그리고, cs 파일은 페이지의 동작을 구현한다 XAML의 x:Name 속성으로 cs에서 xaml상의 UI요소에 접근 할 수 있다. &lt;Button x:Name=\"CounterBtn\" Text=\"로그인\" SemanticProperties.Hint=\"Counts the number of times you click\" Clicked=\"OnCounterClicked\" /&gt;"
  },"/all/maui/csharp/2024-02-26-maui-build-error.html": {
    "title": "MAUI build error 해결방법",
    "keywords": "all maui csharp",
    "url": "/all/maui/csharp/2024-02-26-maui-build-error.html",
    "body": "created : 2024-02-26 00:35 updated : 2024-04-14 17:02 maui 빌드 할 때 저장공간 부족 에러 발생할 때 해결방법 MAUI 빌드시 아래와 같은 에러가 발생했다. 에러메시지를 제대로 읽지 않고 리빌드만 계속했는데 , 동일한 에러가 계속해서 발생했다. 자세히 보니 “저장공간이 부족해서 빌드할수 없다” 는 내용이었다. 크롬창을 몇개 닫고, 다른 vscode 인스턴스도 종료하고 다시 빌드 하였더니 정상적으로 빌드가 되었다."
  },"/all/maui/csharp/2024-02-26-maui-add-new-file.html": {
    "title": "vscode에서 maui 프로젝트 활용",
    "keywords": "all maui csharp",
    "url": "/all/maui/csharp/2024-02-26-maui-add-new-file.html",
    "body": "created : 2024-02-26 00:35 updated : 2024-04-13 21:47 여기서 부터 글을 작성하세요"
  },"/all/maui/csharp/2024-02-26-maui-hotreload.html": {
    "title": "MAUI에서 Hot Reload적용 하는 방법",
    "keywords": "all maui csharp",
    "url": "/all/maui/csharp/2024-02-26-maui-hotreload.html",
    "body": "created : 2024-02-26 00:35 updated : 2024-04-12 00:29 MAUI에서 Hot Reload 기능을 활성화 하는 방법에 대해 설명합니다. Microsoft 공식 문서에서는 Hot Reload가 동작한다고 설명하고 있으나 내 맥북에서는 제대로 동작하지 않았다. https://dotnet.microsoft.com/en-us/learn/maui/first-app-tutorial/modify 결국 DotNet.Meter 라는 vscode extension을 설치하여 Hot Reload기능을 사용 할 수 있었다. DotNet.Meter설치 후 다음의 순서대로 설정해주어야 한다. Run And Debug - Add Configuration - .Net Meter Debugger 선택 launch.json 파일 생성되면, 다음처럼 입력 { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \".NET Meteor Debugger\", \"type\": \"dotnet-meteor.debugger\", \"request\": \"launch\", \"preLaunchTask\": \"dotnet-meteor: Build\" } ] } *.csproj 파일에 아래처럼 패키지 추가 &lt;ItemGroup&gt; &lt;PackageReference Include=\"DotNetMeteor.HotReload.Plugin\" Version=\"3.*\"/&gt; &lt;/ItemGroup&gt; MauiProgram.cs 에 Hot Reload Plugin을 Enable 시켜준다. using Microsoft.Extensions.Logging; using DotNet.Meteor.HotReload.Plugin; //&lt;------- 여기 namespace MauiApp1; public static class MauiProgram { public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); builder .UseMauiApp&lt;App&gt;() .ConfigureFonts(fonts =&gt; { fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\"); fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\"); }); #if DEBUG builder.Logging.AddDebug(); builder.EnableHotReload(); //&lt;------- 여기 #endif return builder.Build(); } } 이제 xaml 파일이 수정되면 에뮬레이터에 바로 적용된다. 다시 빌드할 필요가 없다."
  },"/all/cpp/2024-02-26-polymorphism.html": {
    "title": "다형성",
    "keywords": "all cpp",
    "url": "/all/cpp/2024-02-26-polymorphism.html",
    "body": "다형성(Polymorphism) 부모 클래스 타입의 포인터가, 여러 형태의(다형) 자식 클래스를 가리킬 수 있음을 의미한다. 이렇게 부모 클래스가 자식 클래스를 가리킬 수 있으면 여러가지면에서 유리하다. aaaa bbb ccc 다형성에 대한 상세한 설명 정적결합 다음의 코드를 살펴보자. #include &lt;stdio.h&gt; #include &lt;string.h&gt; class Base { public: void hello(){printf(\"I am Base\\n\");} }; class Derived : public Base { public: void hello(){printf(\"I am Derived\\n\");}; }; int main() { Base B, *pB; Derived D;; pB = &amp;B; pB-&gt;hello(); pB = &amp;D; pB-&gt;hello(); return 0; } pB = &amp;B 는 당연히 가능한 표현이고, pB = &amp;D 도 부모는 자식을 가리킬 수 있으므로 문제가 되지 않는다. 근데 우리가 원했던 출력 결과와는 달리, 두개의 pB-&gt;hello() 결과가 모두 I am Base 로 출력된다. pB = &amp;Base; pB-&gt;hello(); //결과 : I am Base pB = &amp;Derived; pB-&gt;hello(); //결과 : I am Base 출력 결과 I am Base I am Base 이런 결과가 나오는 이유는, 컴파일러는 포인터가 선언될 당시의 타입을 보고 이 타입에 맞는 멤버 함수를 호출하기 때문이다. 즉, pB = &amp;D; 로 pB가 D를 가리키도록 하였을지라도, 선언될 당시 Base * pB 로 선언되어 있으므로 Base의 hello()를 호출하는 것이다. 이를 정적 결합(Static Binding) 이라고 한다. 이와 달리, 클래스 포인터에 실제로 할당 된 객체의 멤버함수를 호출하는 방식을 동적 결합(Dynamic Binding)이라고 한다. 동적 결합을 위해서는 멤버함수에 virtual 예약어를 붙어주면 된다. 위 코드를 다음과 같이 수정하면 원하는 결과를 얻게 된다. #include &lt;stdio.h&gt; #include &lt;string.h&gt; class Base { public: virtual void hello(){printf(\"I am Base\\n\");} }; class Derived : public Base { public: virtual void hello(){printf(\"I am Derived\\n\");}; }; int main() { Base B, *pB; Derived D;; pB = &amp;B; pB-&gt;hello(); pB = &amp;D; pB-&gt;hello(); return 0; } 출력 결과 I am Base I am Derived 함수포인터 부모는 자식을 가리킬 수 있다 가상함수"
  },"/jekyll/2024-02-26-jekyll.html": {
    "title": "Jekyll 사용법",
    "keywords": "jekyll",
    "url": "/jekyll/2024-02-26-jekyll.html",
    "body": "created : 2024-02-26 00:35 updated : 2024-04-08 11:55 Jekyll 사용법에 대해 설명합니다. Jekyll 설치 방법 Jekyll 실행 방법 wiki의 루트 디렉토리에서 다음의 명령을 실행하면, 소스코드가 바뀔때 마다 브라우저에 자동 업데이트 된다. sudo bundle exec jekyll serve --livereload yoo@MacForYoo git/daniel00.github.io (master) » bundle exec jekyll serve –livereload 로컬에서 확인하는 방법 브라우저에서 http://localhost:4000 주소를 연다. 파일 또는 이미지가 추가되면 반드시 개행! git add, git commit를 해주어야 한다. 링크가 추가되면 반드시 개행해야 업데이트가 된다.(줄끝에 “&lt;br&gt;” 또는 스페이스 두개) 파일이 추가되었으나 commit 되지 않아서 404 Not Found라는 문구가 표시된다. git add, git commit 후에 정상적으로 표시된다. no accepter 에러 발생시 해결방법 jekyll을 kill 한 후 재시작 한다. ps 로 프로세스 아이디를 찾아서 kill 한다. ps -aux | grep jekyll kill -9 프로세스ID 그리고 jekyll을 재시작 한다. bundle exec jekyll serve --livereload 커맨드를 실행하는 경로에 유의해야 한다. github.io루트 디렉토리에서 실행해야 한다!!!"
  },"/all/2024-02-26-StudyUi.html": {
    "title": "유니티 UI 화면",
    "keywords": "all",
    "url": "/all/2024-02-26-StudyUi.html",
    "body": "연습을 통해 유니티 화면에 익숙해져 봅니다. Secne View. 씬뷰 게임을 구성하는 메인화면. 리소스를 배치해 화면을 구성한다. Game View. 게임뷰 게임을 실행했을때 보이는 화면. 내가 테스트 할 때는 Game View가 검정화면 으로만 보였다. 해결방법은 Scene - 우클릭 - Add Tab - Game을 하면 보였다. 이래도 해결이 안된다면, 카메라, 조명 등이 오브젝트를 잘 비추고 있는지 확인해 보시길. Hierarchy View. 하이어라키 뷰. 계층 뷰 씬에서 사용되는 오브젝트 이름을 목록으로 표시한다. 프로젝트를 만들면 기본적으로 Main Camera와 Directional Light 오브젝트가 추가된다. 오브젝트 추가하기 Hierarchy View에서 추가한다. 여기서는 3D 오브젝트중 Cube(정육면체)를 추가해 보겠다. Hierarchy, Scene View 에 Cube가 추가되었다. 오브젝트 선택 Secne View의 아이콘모음에서 “Move Tool”을 선택 한 후 오브젝트를 클릭하면 오브젝트가 선택된다. 또는 Hierarchy View에서 선택해도 된다. Inspector View 인스펙터 뷰 오브젝트가 선택되면 인스펙터 뷰에 오브젝트의 정보가 나타나고 수정 할 수 있다. 오브젝트를 뷰의 정가운데로 이동하기 Hierarchy View에서 오브젝트 선택 후 더블클릭 오브젝트를 선택 한 후 Shift + f 를 누른다(대문자 F) 메인카메라를 선택 후 shift f 를 눌러서 씬뷰의 정 가운데로 이동시켰다. shift f를 한번더 누르면 줌이 된다. Scene View에서 관찰자 시점 변경하는 방법 Scene 시점을 변경하면, 개발자가 보는 화면만 변경되는 것 뿐이지 실제 게임 화면이 변하는건 아니다. 줌 - 마우스 휠 시점 이동 - 손모양 아이콘 선택 후 드래그 시점 회전 - Alt + 드래그 (커서가 눈동자 모양으로 바뀐다) 오브젝트 변경하기(크기, 위치, 회전) 오브젝트를 변경하면 실제 게임시 보여지는 화면이 변경된다. 오브젝트 이동 십자가 화살표 아이콘 선택 후 오브젝트 선택한 후 드래그하면 오브젝트가 이동된다. 3축 화살표를 누르고 이동하면 X,Y,Z 각 축으로만 이동된다. 오브젝트 회전 로테이션 아이콘 선택 후 각축 가이드 라인을 선택한 후 드래그 하면 오브젝트의 회전이 수행된다. 오브젝트 크기변경 Scale 아이콘 선택 후 각축 가이드 라인을 선택한 후 드래그 하면 오브젝트의 크기가 변경된다. test"
  },"/all/2024-02-26-Prefab.html": {
    "title": "Prefab",
    "keywords": "all",
    "url": "/all/2024-02-26-Prefab.html",
    "body": "Prefab에 대해 정리합니다."
  },"/all/unity/2024-02-26-OpenProject.html": {
    "title": "유니티 프로젝트 열기",
    "keywords": "all unity",
    "url": "/all/unity/2024-02-26-OpenProject.html",
    "body": "유니티 허브에서 기존 프로젝트 열기 오랜만에 유니티를 사용하려 했더니 기존에 작성한 프로젝트를 유니티허브에서 찾을 수 없었다. 다음처럼 디스크상의 프로젝트를 Add 하면 유니티 허브에 보이게 되고, 이 프로젝트를 열면된다. Add 한 프로젝트가 리스트에 보이게 된다. 이중 원하는 프로젝트를 열면 된다."
  },"/all/unity/2024-02-26-NewProject.html": {
    "title": "유니티 새 프로젝트",
    "keywords": "all unity",
    "url": "/all/unity/2024-02-26-NewProject.html",
    "body": "유니티 허브에서 새 프로젝트 만들기 유니티 허브에서 “New project” 를 눌러서 만든다. 연습용으로 3D형식의 프로젝트를 이름 “Test3D”로 만들어보았다."
  },"/all/history/2024-02-26-1%EC%B0%A8%EC%84%B8%EA%B3%84%EB%8C%80%EC%A0%84.html": {
    "title": "1차 세계대전",
    "keywords": "all history",
    "url": "/all/history/2024-02-26-1%EC%B0%A8%EC%84%B8%EA%B3%84%EB%8C%80%EC%A0%84.html",
    "body": "1차 세계대전의 발발 원인과 과정에 대해 설명 합니다. 시대적 배경 당시 산업혁명으로 제품의 대량생산이 가능해졌으나 공급과잉의 문제도 발생하게 된다. 산업혁명을 이룬 여러 열강들은 제품의 소비처, 원자재 수급처, 값싼 노동력 등을 확보하기 위해 식민지 개척 활동에 나선다. 유럽 각국의 상황 1차 세계대전이 발발된 1914년7월 즈음의 유럽의 정세는, 프랑스는 프로이센(독일 이전에 독일연방의 한 국가)과의 전쟁에 패한후 반독일 정서가 지배하고 있었고 영국은 독일의 계속되는 해군력 증강에 본인들의 식민지 확장에 영향을 미칠까 견제하고 있었으며 러시아는 지중해 진출을 위해 슬라브족을(세르비아) 이용하고 싶었으나 ,이미 오스트리아-헝가리제국이 슬라브민족 국가인 보스니아를 식민지로 차지하고 있었고 인접한 또다른 슬라브족 국가인 세르비아마저 호시탐탐 노리고 있었기에 , 오스트리아-헝가리제국 또한 같은 게르만민족 동맹국인 독일과 긴장상태를 유지하고 있었다. 독일 입장에서는 왼쪽의 프랑스의 반독일 정서로 관계가 좋을수 없었으며 , 오른쪽의 러시아와도 협정을 파기 하는등 좋지않은 관계가 유지되고 있었다. 또한 독일과 오스트리아-헝가리제국은 같은 게르만민족으로 동맹관계를 유지하고 있었고, 프랑스와 러시아도 동맹관계였다. 1914년 당시 군사동맹 지도 갈색 : 삼국동맹 , 독일-오스트리아.헝가리제국-이탈리아 녹색 : 삼국연합 , 영국-프랑스-러시아"
  },"/cpp/2024-02-26-cattest.html": {
    "title": "포스트 제목을 입력하세요",
    "keywords": "cpp",
    "url": "/cpp/2024-02-26-cattest.html",
    "body": "created : 2024-02-26 00:00 updated : 2024-02-26 00:33 여기서 부터 글을 작성하세요"
  },"/jekyll/2024-02-25-jekyll-category.html": {
    "title": "category 만드는 법",
    "keywords": "jekyll",
    "url": "/jekyll/2024-02-25-jekyll-category.html",
    "body": "jekyll 에서 카테고리를 모아서 표시하는 방법에 대해 설명 합니다. 아래와 같이 카테고리가 메뉴가 추가되고 포스트 개수를 표시하게 된다. 여기서는 ‘cpp’ 카테고리를 만드는 예로 설명한다. category-cpp.md 를 만든다. category-cpp.md 에 다음의 front matter를 작성한다. --- title: \"C++ 프로그래밍\" layout: post permalink: categories/cpp --- 아래의 내용을 작성한다. (코드블럭으로 넣으면 링크된 파일이 표시되어서 부득이 그림으로 넣었다. 나중에 수정예정) toc-date.html에 다음과 같이 카테고리를 만들고, 카테고리에 속한 포스트들을 읽어 오도록 작성한다."
  },"/cpp/2024-02-25-333.html": {
    "title": "test cpp cpp cpp",
    "keywords": "cpp",
    "url": "/cpp/2024-02-25-333.html",
    "body": "cpp로 분류가 잘 되었나요?"
  },"/2024-02-25-222.html": {
    "title": "tttteeeessstttt",
    "keywords": "",
    "url": "/2024-02-25-222.html",
    "body": ""
  },"/2024-02-25-temptest.html": {
    "title": "tttteeeessstttt",
    "keywords": "",
    "url": "/2024-02-25-temptest.html",
    "body": ""
  },"/testcat/2024-02-21-test6.html": {
    "title": "test6",
    "keywords": "testcat",
    "url": "/testcat/2024-02-21-test6.html",
    "body": ""
  },"/2024-02-20-test4.html": {
    "title": "test4",
    "keywords": "",
    "url": "/2024-02-20-test4.html",
    "body": ""
  },"/2024-02-20-test3.html": {
    "title": "test3",
    "keywords": "",
    "url": "/2024-02-20-test3.html",
    "body": ""
  },"/2024-02-17-newfile.html": {
    "title": "newfile",
    "keywords": "",
    "url": "/2024-02-17-newfile.html",
    "body": ""
  },"/2024-02-17-tttteeeessstttt.html": {
    "title": "tttteeeessstttt",
    "keywords": "",
    "url": "/2024-02-17-tttteeeessstttt.html",
    "body": "this is tttteeeeeeeeeeessssttt"
  },"/cpp/2024-02-17-test.html": {
    "title": "test",
    "keywords": "cpp",
    "url": "/cpp/2024-02-17-test.html",
    "body": "this is test"
  },"/cpp/2024-02-17-yootest.html": {
    "title": "yoo daniel",
    "keywords": "cpp",
    "url": "/cpp/2024-02-17-yootest.html",
    "body": "this is by yoo this is by yoo this is by yoo this is by yoo this is by yoo"
  },"/cpp/2024-02-15-test1.html": {
    "title": "test222222",
    "keywords": "cpp",
    "url": "/cpp/2024-02-15-test1.html",
    "body": "테스트 test update up 1.연동형/병립형/준연동형 비례대표제에 대해 정리해 봅니다. 사표 (死票, wasted vote) 예를 하나 들어보자, 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 비록 B가 선거에서 지기는 했지만 40표를 얻었다, 하지만 이 모든 표는 사표(死票, wasted vote) 가 된 것이다. 60표를 얻은 A가 승자독식으로 반장이 되었고, 즉 B에게 투표한 40명의 생각은 전혀 반영되지 않았다. 즉 이러한 “다수제” 선거제도는 민의(民意)를 정확히 반영하기 어려운 구조이다. 테스트"
  },"/politics/political/2024-02-15-election.html": {
    "title": "병립형-연동형",
    "keywords": "politics Political",
    "url": "/politics/political/2024-02-15-election.html",
    "body": "test hello hello2 hello3 hello4 hello5 1.연동형/병립형/준연동형 비례대표제에 대해 정리해 봅니다. 수정 날짜가 제대로 표시 되나요? 22시20분 수정 22시35분 수정 test test2 test3 사표 (死票, wasted vote) 예를 하나 들어보자, 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 비록 B가 선거에서 지기는 했지만 40표를 얻었다, 하지만 이 모든 표는 사표(死票, wasted vote) 가 된 것이다. 60표를 얻은 A가 승자독식으로 반장이 되었고, 즉 B에게 투표한 40명의 생각은 전혀 반영되지 않았다. 즉 이러한 “다수제” 선거제도는 민의(民意)를 정확히 반영하기 어려운 구조이다."
  },"/cpp/2024-02-15-hello-world.html": {
    "title": "hello world",
    "keywords": "cpp",
    "url": "/cpp/2024-02-15-hello-world.html",
    "body": "front matter에서 생성한 파일 입니다. 수정 수정 수정"
  },"/cpp/2024-02-15-cpptest222.html": {
    "title": "cpptest222",
    "keywords": "cpp",
    "url": "/cpp/2024-02-15-cpptest222.html",
    "body": "cpp test 2222 입니다."
  },"/cpp/2024-02-15-cpptest.html": {
    "title": "cpp cpp cpp",
    "keywords": "cpp",
    "url": "/cpp/2024-02-15-cpptest.html",
    "body": "created : 2024-02-15 00:00 updated : 2024-02-26 00:30 cpp test 입니다"
  },"/test2/2024-02-12-test2.html": {
    "title": "test2",
    "keywords": "test2",
    "url": "/test2/2024-02-12-test2.html",
    "body": "test 1.연동형/병립형/준연동형 비례대표제에 대해 정리해 봅니다. 사표 (死票, wasted vote) 예를 하나 들어보자, 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 비록 B가 선거에서 지기는 했지만 40표를 얻었다, 하지만 이 모든 표는 사표(死票, wasted vote) 가 된 것이다. 60표를 얻은 A가 승자독식으로 반장이 되었고, 즉 B에게 투표한 40명의 생각은 전혀 반영되지 않았다. 즉 이러한 “다수제” 선거제도는 민의(民意)를 정확히 반영하기 어려운 구조이다."
  },"/chrome/2024-02-09-RemoveHistory.html": {
    "title": "크롬에서 검색기록 저장하지 않는 방법",
    "keywords": "Chrome",
    "url": "/chrome/2024-02-09-RemoveHistory.html",
    "body": "크롬에서 검색기록을 남기지 않는 방법에 대해 설명합니다. 크롬에서 구글 페이지를 열면 내가 검색한 기록이 드롭다운 형태로 보여진다. 이건 인터넷 기록, 쿠키 등을 삭제해도 여전히 남아있다. 해결 방법은, 크롬이 관리하는 History 파일의 내용을 삭제하고 읽기전용, 잠금 등으로 처리하여, 크롬이 검색기록을 저장하지 못하게 하면된다. History 파일 경로 ~/Library/Application Support/Google/Chrome/Default/History"
  },"/political/2024-02-06-election2.html": {
    "title": "비례대표제2",
    "keywords": "Political",
    "url": "/political/2024-02-06-election2.html",
    "body": "2.연동형/병립형/준연동형 비례대표제에 대해 정리해 봅니다. 사표 (死票, wasted vote) 예를 하나 들어보자, 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 초등학교에서 반장선거를 했다. 후보는 A, B 두명이었다. 한반에 총 100명이 있었고 A는 60표, B는 40표를 얻었다. 많은 표를 얻은 A가 반장이되어 기뻐했다. 반면 B에게 투표했던 40명의 아이들은 내 표는 아무런 의미가 없는거였네 하며 슬퍼했다. 비록 B가 선거에서 지기는 했지만 40표를 얻었다, 하지만 이 모든 표는 사표(死票, wasted vote) 가 된 것이다. 60표를 얻은 A가 승자독식으로 반장이 되었고, 즉 B에게 투표한 40명의 생각은 전혀 반영되지 않았다. 즉 이러한 “다수제” 선거제도는 민의(民意)를 정확히 반영하기 어려운 구조이다."
  },"/jekyll/2023-12-12-footnotes.html": {
    "title": "Using Footnotes",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-12-12-footnotes.html",
    "body": "This jekyll-theme supports MathJax to render footnotes in markdown. e.g., The well known Pythagorean theorem $x^2 + y^2 = z^2$ was proved to be invalid for other exponents[^1]. Meaning the next equation has no integer solutions: $$ x^n + y^n = z^n $$ The well known Pythagorean theorem $x^2 + y^2 = z^2$ was proved to be invalid for other exponents1. Meaning the next equation has no integer solutions: \\[x^n + y^n = z^n\\] Long contents long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 Long contents long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 Long contents long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 Long contents long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 Long contents long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 Long contents long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem &#8617;"
  },"/jekyll/2023-10-14-math-latex.html": {
    "title": "MathJax and LaTeX",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-10-14-math-latex.html",
    "body": "This jekyll-theme supports MathJax to render $\\LaTeX$ and mathematics expressions. TIP Currently, Kramdown uses double dollar sign delimiters for inline and display math: https://kramdown.gettalong.org/syntax.html#math-blocks. e.g., The well known Pythagorean theorem $x^2 + y^2 = z^2$ was proved to be invalid for other exponents. Meaning the next equation has no integer solutions: $$ x^n + y^n = z^n $$ The well known Pythagorean theorem $x^2 + y^2 = z^2$ was proved to be invalid for other exponents. Meaning the next equation has no integer solutions: \\[x^n + y^n = z^n\\] Another example with more complex markups: When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are \\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\] Refer to the MathJax website for more examples."
  },"/jekyll/2023-08-31-mermaid.html": {
    "title": "Diagrams with mermaid.js",
    "keywords": "Jekyll",
    "url": "/jekyll/2023-08-31-mermaid.html",
    "body": "저는 다니엘333 입니다. This jekyll-theme supports mermaid.js to render diagrams in markdown. To enable the mermaid support, you need to set mermaid: true in the front matter of your post. --- title: Diagrams with mermaid.js date: 2023-08-31 layout: post mermaid: true --- Then you can use mermaid syntax in your markdown: graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; Or, even some complex examples: sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts &lt;br/&gt;prevail! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts &lt;br/&gt;prevail! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! Refer to the mermaid.js website for more examples."
  },"/jekyll/2022-06-30-tips_warnings_dangers.html": {
    "title": "Tips, Warnings, and Dangers",
    "keywords": "Jekyll",
    "url": "/jekyll/2022-06-30-tips_warnings_dangers.html",
    "body": "This jekyll-theme supports tips, warnings, and dangers blocks and the style is referred from the discord.js website. You could have the following markdown attributes (supported by kramdown): Tips Using a {: .block-tip} attribute: &gt; ##### TIP &gt; &gt; This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have &gt; this or a similar version after installation. {: .block-tip } TIP This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have this or a similar version after installation. Warnings Using a {: .block-warning} attribute: &gt; ##### WARNING &gt; &gt; Be sure that you're familiar with things like async/await and object destructuring &gt; before continuing, as we'll be making use of features like these. {: .block-warning } WARNING Be sure that you’re familiar with things like async/await and object destructuring before continuing, as we’ll be making use of features like these. Dangers Using a {: .block-danger} attribute: &gt; ##### DANGER &gt; &gt; You cannot delete an ephemeral message. {: .block-danger } DANGER You cannot delete an ephemeral message."
  },"/jekyll/2022-06-26-wide_tables.html": {
    "title": "Wide tables",
    "keywords": "Jekyll",
    "url": "/jekyll/2022-06-26-wide_tables.html",
    "body": "저는 다니엘777 입니다. A wide tables needs to be wrapped into a div with class table-wrapper to make sure it displayed as expected on mobile devices. For example, &lt;div class=\"table-wrapper\" markdown=\"block\"&gt; |title1|title2|title3|title4|title5|title6|title7|title8| |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |1|2|3|4|5|6|7|8| |1|2|3|4|5|6|7|8| |1|2|3|4|5|6|7|8| |1|2|3|4|5|6|7|8| &lt;/div&gt; Will be rendered as title1 title2 title3 title4 title5 title6 title7 title8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8"
  },"/jekyll/2022-05-24-page_cover.html": {
    "title": "Page with cover image",
    "keywords": "Jekyll",
    "url": "/jekyll/2022-05-24-page_cover.html",
    "body": "저는 다니엘666 입니다. The jekyll-gitbook theme supports adding a cover image to a specific page by adding a cover field to the page metadata: --- title: Page with cover image author: Tao He date: 2022-05-24 category: Jekyll layout: post + cover: /assets/jekyll-gitbook/dinosaur.gif ---"
  },"/jekyll/2021-08-10-toc.html": {
    "title": "How to Generate TOC",
    "keywords": "Jekyll",
    "url": "/jekyll/2021-08-10-toc.html",
    "body": "The jekyll-gitbook theme leverages jekyll-toc to generate the Contents for the page. The TOC feature is not enabled by default. To use the TOC feature, modify the TOC configuration in _config.yml: toc: enabled: true Why this repo long contents ….. a b c d Sub title 1 Sub title 2 Sub title 3 Why this repo long contents ….. 1 2 3 4 Why this repo long contents ….. e f g h Why this repo 5 6 7 8 Why this repo long contents ….. a b c d Why this repo long contents ….. 1 2 3 4 Why this repo long contents ….. e f g h Why this repo 5 6 7 8 Why this repo long contents ….. a b c d Why this repo long contents ….. 1 2 3 4 Why this repo long contents ….. e f g h Why this repo 5 6 7 8 Why this repo long contents ….. a b c d Why this repo long contents ….. 1 2 3 4 Why this repo long contents ….. e f g h Why this repo 5 6 7 8"
  },"/cpp/2019-08-22-hello333.html": {
    "title": "hello444",
    "keywords": "cpp",
    "url": "/cpp/2019-08-22-hello333.html",
    "body": "hello 333"
  },"/jekyll/2019-04-29-license.html": {
    "title": "License",
    "keywords": "Jekyll",
    "url": "/jekyll/2019-04-29-license.html",
    "body": "저는 다니엘444 입니다. This work is open sourced under the Apache License, Version 2.0, using the same license as the original GitBook repository. Copyright 2019 Tao He."
  },"/jekyll/2019-04-28-howto.html": {
    "title": "How to Get Started",
    "keywords": "Jekyll",
    "url": "/jekyll/2019-04-28-howto.html",
    "body": "저는 다니엘222 입니다. The jekyll-gitbook theme can be used just as other Jekyll themes and support remote theme on Github Pages, see the official guide as well. You can introduce this jekyll theme into your own site by either Fork this repository and add your markdown posts to the _posts folder, then push to your own Github repository. Use as a remote theme in your _config.yml(just like what we do for this site itself), # Configurations title: Jekyll Gitbook longtitle: Jekyll Gitbook remote_theme: sighingnow/jekyll-gitbook TIP No need to push generated HTML bundle."
  },"/jekyll/2019-04-27-why.html": {
    "title": "Why Jekyll with GitBook",
    "keywords": "Jekyll",
    "url": "/jekyll/2019-04-27-why.html",
    "body": "저는 다니엘555 입니다. 저는 다니엘555 입니다. 저는 다니엘555 입니다. GitBook is an amazing frontend style to present and organize contents (such as book chapters and blogs) on Web. The typical to deploy GitBook at Github Pages is building HTML files locally and then push to Github repository, usually to the gh-pages branch. However, it’s quite annoying to repeat such workload and make it hard for people do version control via git for when there are generated HTML files to be staged in and out. This theme takes style definition out of generated GitBook site and provided the template for Jekyll to rendering markdown documents to HTML, thus the whole site can be deployed to Github Pages without generating and uploading HTML bundle every time when there are changes to the original repository."
  }}
